let,const

1.当前块级作用域及其子作用域中可用
"use strict"
{
    var a = 1;
    let b = 1;
    {
        let c = 1;
        console.log(b) //1
    }
}
console.log(a)
// console.log(b)  // error b is undefined

2.var 是函数作用域，所以会存在泄密。

for(var i = 0; i < 3; i++){}
console.log(i); //3

for(let j = 0; j < 3; j++){
    // 只在这个快级之内才能访问到
}
// console.log(j) error j is not defined 

3.var 声明的变量存在变量提升
let，const 只有在变量声明之后才能使用，否则报错

4.暂时性失效
var c = 0;
function fn() {
    console.log(c);
    let c;  // 会导致函数外声明的c暂时性失效，并且let不存在变量提升
}
fn()

5. 同一个作用域内，不能同时声明同一个名称的变量

6. let const 防止变量泄漏的这种特性和立即执行函数很像

7. es6种变量不会被提升

function boo() {
    console.log(2)
}
function foo() {
    boo();
    if(false) {
        function boo() {
            console.log(1)
        }
    }
}
foo()
老版本打印出来1，新版本打印出来2

8. 数组函数的例子

const 不能修改的是物理指针不能修改

Object.freeze(obj)
彻底冻结一个对象

class 类
本质上是一个语法糖，使得js能开发大型项目的能力

es5 call的形式进行继承，是先创建子级this,然后将父级的属性和方法以及构造函数中的属性和方法指向这个this
es6 中的super是先创建父级this,然后在父级对象的基础上，把子级属性和原型上的方法添加到对象上

class I extends Person{

}
等价于
class I extends Person{
    constructor(...arg) {
        super(..arg)
    }
}

立即执行类：在运行的时候立即执行了，并且创建了一个user对象
let user = new class User{
    constructor(name) {
        this.name = name;
    }
}('zhang');
console.log(user);

class创建的类不存在变量提升

promise
错误如果在then中捕获到之后，在catch中就不会再次捕获

function asyncFn() {
    return new Promise(function(resolve, reject) {
        setTimeout(function(){
            resolve(1);
        })
    })
}

asyncFn()
.then(function(a){
    console.log(a); // 1
    return 'ok'
})
.then(function(b) {
    console.log(b) // ok
})
.then(function(c) {
    console.log(c) // undefined
})
有返回值的时候，返回值是promise,会直接执行promise.then
如果是一个简单的值，Promise.resolve('1')常见一个promsie对象,下一个then会获取到返回值，没有的时候，会只能得到undefined

promsie 中的错误处理
asyncFn()
.then(function(a){
    throw new Error('错误')
    console.log(a); // 1
    return asyncFn();
}, funtion() {
    // 这里面可以接受到第一个asyncFn执行时候的错误，但是接受不到then里面抛出的错误
})
.then(function(b) {
    console.log(b) // ok
})
.catch(function(error) {
    // 这里面可以捕获到then中抛出的错误
})

同一个错误的捕获会以then的第二个参数优先，如果没有会被catch捕获，并且catch也会捕获reject种抛出的错误

Promsie.all()
参数是promsie组成的数组，会让这些异步promise并行执行，然后返回一个promsie对象，通过then可以拿到结果组成的一个数组
var promsie = Promise.all([asyncFn(1, 2), asyncFn(1, 2), asyncFn(1, 2)])
promsie.then(function(result) {
    console.log(result) // [3, 3, 3]
}).catch(function(error) {
    console.log(error)
})

Promise.race() 
执行数组中的所有promsie，然后返回最先执行完成的promise
var promsie = Promise.race([asyncFn(1, 2), asyncFn(1, 2), asyncFn(1, 2)])
promsie.then(function(result) {
    console.log(result)
}).catch(function(error) {
    console.log(error)
})

Promise.resolve()
promise.reject()

Symbol 一种新的数据类型，两个长相相同的Symbol不相同
var name = Symbol('zhang');
let obj = {
    [name]: 'zhang'
}
console.log(obj[name]);

可以利用Symbol唯一性这个特性，用于创建私有属性

对象属性含有symbol类型的key时候，通过通常的便利是拿不到symbol类型的key的
var name = Symbol('zhang');
let obj = {
    a: "aaa",
    [name]: 'zhang'
}
console.log(obj[name]);
console.log(Object.keys(obj));  // ['a']
for(name in obj){
    console.log(name);
}
console.log(Object.getOwnPropertyNames(obj)); //['a']
console.log(Object.getOwnPropertySymbols(obj)); //[ Symbol(zhang) ]

// 生成Symbol的方式
let s1 = Symbol.for('name');
let s2 = Symbol.for('name');
console.log(s1 === s2) //true
通过Symbol.for(key)生成的Symbol实例，只要key是相同的，两个实例相等
通过Symbol.keyFor(s1)可以得到通过Symbol.for()创建的Symbol实例的字符串

[Symbol.Iterator]接口，只要部署了这个接口，就可以使用for of 进行遍历
当调用[Symbol.Iterator]()这个方法的时候，会返回一个Iterator的指针对象，这个指针对象存在next()方法
class UserGroup{
    constructor(users) {
        this.users = users;
        //{zhang: '121212', song: '121212'}
    }
    [Symbol.iterator]() {
        //每次iterater调用都是一次全新的接口，所以使用到的需要全部重新初始化
        const _this = this;
        let i = 0;
        const users = Object.keys(_this.users);
        return {
            next() {
                return {
                   value: {name: users[i], qq: _this.users[users[i++]]},
                   done: i > users.length
                }
            }
        }
    }
}

const users = new UserGroup({zhang: '121212', song: '121212'})
const ite = users[Symbol.iterator]();
console.log(ite.next());
console.log(ite.next());
console.log(ite.next());
console.log(ite.next());
for(let name of users){
    console.log(name) 
    // { name: 'zhang', qq: '121212' }
    // { name: 'song', qq: '121212' }
}

也可以给一个对象直接加入Symbol.iterator方法
let iterator = function() {
    const _this = this;
    let i = 0;
    const users = Object.keys(_this);
    return {
        next() {
            return {
                value: {name: users[i], qq: _this[users[i++]]},
                done: i > users.length
            }
        }
    }
}

let obj = {zhang: '121212', song: '121212'};
obj[Symbol.iterator] = iterator;

let obj2 = {sdfsf: '121212', sdfs: '121212'};
obj2[Symbol.iterator] = iterator;
for(let name of obj){
    console.log(name);
}
for(let name of obj2){
    console.log(name);
}

类数组也可以通过这种添加[Symbol.iterator],让他支持for of 循环
let obj = {
    length: 2,
    '0': 1,
    '1': 2
}

obj[Symbol.iterator] = [][Symbol.iterator];
for(let name of obj){
    console.log(name);
}

// set map arr string 都实现了[Symbol.iterator]，可以直接使用for of

generator
generator是一个生成器
generator函数
function *fn(){
    consolo.log(1);
}
fn()
在执行generator函数的时候，他默认不会执行方法体内的代码，他会返回一个指针，这个指针实现了iterator接口，相对的就是iterator对象
翻译iterator对象存在next()方法，执行next()方法就会执行方法体
next()返回的值是函数return的值，如果没有返回值，value是undefined
next()一般配合yield使用，如果没有yield，会一次性执行完整个generator函数，存在yield会把一个generator函数分成几段去执行，每一个断点是通过yield暂停的

function *fn() {
    yield 1;
    yield 2;
    yield 3;
    return 4
}
let it = fn();

console.log(it.next());
console.log(it.next());
console.log(it.next());
console.log(it.next());
// { value: 1, done: false }
// { value: 2, done: false }
// { value: 3, done: false }
// { value: 4, done: true }

for(let name of it){
    console.log(name); 
    // 1
    // 2
    // 3
    // for of循环只会打印出done为false的值，所以return出来的值打印不出来
}

// generator函数返回的是一个指针，这个指针每一次指向的是yield或者是return
yield可以有多个，return只能有一个，通过generator生成器，就可以一次生成多个，而且是有断点的

yield的值和赋值
function *fn(_name){
    let name = yield _name; //yield默认返回undefined
    return name;
}

let it = fn('zhang');
console.log(it.next());
console.log(it.next());
// { value: 'zhang', done: false }
// { value: undefined, done: true }

function *fn1(_name){
    let name = yield _name; //yield默认返回undefined
    return name;
}

let it2 = fn1('zhang');
console.log(it2.next());
console.log(it2.next('abc')); //想让yield返回值，需要在next()种传入参数
// { value: 'zhang', done: false }
// { value: 'abc', done: true }

yield只能在generator函数之内使用

yield语句的位置
在表达式中使用需要扩住 5 + (yield 3)

yield默认情况下返回undefined，并且不会抛出异常

set
set数据结构和数组之间的区别就是set中的值都是唯一的，不能出现重复值
通过new Set()创建一个Set对象
const arr = [1,2,3,1];
const set = new Set(arr);
set的增删改查

查看set中有多少个元素
set.size

增加
set.add(10)  //每一次添加之后，返回的依旧是set对象，可以进行连环操作
set.add(9).add(8).add(7)
在set种NaN做了处理，会进行NaN查重

删除
const bol = set.delete(2) //删除成功返回true, 失败返回false
console.log(bol) //true

判断有没有
const isHas = set.has(3) //存在返回true,不存在返回false
console.log(isHas) //true

清除全部的值
set.clear()

数组可以通过set对象去除自身重复的值
Array.from(new Set(arr));

Set本身实现了[Symbol.iterator]接口，所以可以使用for of
Set.prototype[Symbol.iterator] === Set.prototype.values  //true
Set.prototype[Symbol.iterator] === Set.prototype.keys    // true
所以可以看出在set数据结构中，key和value都是一样的，都是set对象中的元素，并且都可以使用for of 进行遍历

let keys = set.keys();
for(let key of keys) {
    console.log(key);
}

let values = set.values();
for(let value of values){
    console.log(value)
}

set.entries()
返回一个[key, value]的数组结构
let entries = set.entries();
for(entry of entries){
    console.log(entry)
}

map
和对象差不多，但是key可以是任意值(对象，数字，NaN等等)

大小
map.size

增删改查
obj = {a: 1};

增加
map.set('cc', 111).set('bbb', 222)

大小
map.size

得到
let v = map.get(obj);
console.log(v) // aaa

删除
map.delete(obj); // 删除成功返回true，失败返回false

查询
map.has(obj);

清楚 
map.clear()

map初始化
let map = new Map([
    ['name', 'zhang'],
    ['age', 122]
])

Map.prototype[Symbol.iterator] === Map.prototype.entries //true

map.values()
map.keys()
直接遍历map.entrie和直接遍历map是一样的
都实现了[Symbol.iterator]方法，所以都可以进行for of 

map.forEach(function(item, index) {
    console.log(item, index);
})

数组
Array.from() 
1. 可以把类似数组的数据结构转换为数组
2. 可以把实现了[Symbol.iterator]接口的转换为数组

var ele = {
    length: 2,
    '0': 'aaa',
    '1': 'bbb'
}
console.log(Array.from(ele)); //[ 'aaa', 'bbb' ]

let arr = Array.from(ele, function(item, index){
    return item + '----' + index
})
console.log(arr); 
//[ 'aaa----0', 'bbb----1' ]

let set = new Set([1,2,3,4]);
console.log(Array.from(set)); 
//[ 1, 2, 3, 4 ]

let map = new Map([
    [{a: 1, b: 3}, 1],
    ['a', 22]
])
console.log(Array.from(map)); 
//[ [ { a: 1, b: 3 }, 1 ], [ 'a', 22 ] ]

Array.of(3) //[3]
var arr = new Array(3)
console.log(arr) // [, ,]
通过Array.of()创建数组，可以防止使用构造函数不统一的现象

arr.find / arr.findIndex
NaN也能找到

var arr1 = ['a', 'b', 'c', 'd'];
var find = arr1.find(function(value, index, arr) {
    console.log(value, index, arr);
    return value === 'c'; 
})
value  当前的值
index  当前的值得索引
arr 当前数组
返回的是满足条件的第一个值
console.log(find) //c

var arr1 = ['a', 'b', 'c', 'd'];
var findIndex = arr1.findIndex(function(value, index, arr) {
    console.log(value, index, arr);
    return value === 'c'; 
})
value 当前的值
index 当前值的索引
arr 当前数组
返回满足条件的第一个值的下标
console.log(findIndex) //c

arr.copyWithin(target, start=0, end=length))
target 复制到的位置，从该位置开始替换数据
start 从该位置开始读取数据
end 到该位置前停止读取数据
负数表示倒着，不会增加数组长度，多出的不要

在当前数组内部，将指定位置成员赋值到其他位置（会覆盖原来成员），然后返回当前数组

数组填充 arr.fill(value, start=0, end=length)
value 填充的值
start 填充的开始位置
end 再end之前终止填充
不会增加数组长度

对象属性的新写法
var a = 1;
var obj = {
    fn() {

    },
    a,
    get name(name) {
        return this.name;
    },
    set name(name) {
        return this.name;
    }
}

Object.is() 判断两个值是不是相等
Object.is({}, {}) //false
{} === {} //false

Object.is(-0, +0) //false
-0 === +0 //true

Object.is(NaN, NaN) //true
NaN === NaN  //false

Object.assign() 浅拷贝
let obj1 = {};
let obj2 = Object.assign(obj1, {a: 1});
console.log(obj1 === obj2);  // true
说明只是在原来对象的基础上修改，并不是创建一个新的对象

Object.assign() 拷贝的仅仅是一些可枚举的属性

Object.keys(obj);
通过Object.keys()可以得到自身可枚举的属性，得不到原型链上的属性和Symbol类型的属性

Object.getOwnPropertyNames(obj)
可以得到自身属性，包括不可枚举，但是得不到原型链上的属性和Symbol类型的属性

Object.getOwnPropertySymbols(obj)
可以得到Symbol类型的属性，不管是否可枚举

for in 循环可以得到自身的非Symbol类型的属性，包括原型链上的属性和方法，但是都必须是可遍历的

通过class添加的原型上的属性和方法都是不可枚举的，通过prototype添加的属性和方法都是可枚举的

得到一个对象的属性的描述
Object.getOwnPropertyDescriptor(obj, 'email'));

let obj1 = {};
let obj2 = Object.assign(obj1, {a: 1});
console.log(obj1 === obj2);

class A {
    constructor() {
        this.name = 'zhang'
    }

    getName() {
        return this.name;
    }
}

class B extends A{
    constructor() {
        super();
        this.age = 25
    }

    getAge() {
        return this.age;
    }
}

B.prototype.password = '123123';
B.prototype.getPass = function() {
    return this.password;
}

var b = new B();

Object.defineProperty(b, 'email', {
    value: 'zhangxkmail',
    writable: true,
    enumerable: false,
    configurable: false
})

Object.defineProperty(b, 'num', {
    value: 12,
    writable: true,
    enumerable: true,
    configurable: false
})

var sym = Symbol('test');
b[sym] = 'symbol property'


console.log(Object.keys(b)); // [ 'name', 'age', 'num' ]
console.log(Object.getOwnPropertyNames(b)) //[ 'name', 'age', 'email', 'num' ]
console.log(Object.getOwnPropertySymbols(b)) //[ Symbol(test) ]

for(let name in b){
    console.log(name);
    // name
    // age
    // num
    // password
    // getPass
}

console.log(Object.getOwnPropertyDescriptor(b, 'email'));
// { value: 'zhangxkmail',
//   writable: true,
//   enumerable: false,
//   configurable: false }

Object.setPrototypeOf()
Obeject.getPrototypOf()
代替__proto__

class User{
    constructor() {

    }
}

var p = {
    getName() {

    }
}

var user = new User();
console.log(user.__proto__ === User.prototype);  //true
Object.setPrototypeOf(user, p);
var proto = Object.getPrototypeOf(user);
console.log(proto === user.__proto__); // true

字符串扩展

str.includes('a', 2)
str.startsWith('a', 2)
str.endsWith('a', 2)

console.log(str.repeat(3))
会把str复制3次，返回一个新的字符串

模版字符串
` ${aaa} `

模版标签

箭头函数

数组的解构赋值
var [a, b, c] = [1, 2, 3]
var [x, y] = new Set([1, 3])
所有实现了iterator接口的数据结构都能被解析

应用 变量交换
[y, x] = [x, y]

...运算符转换为数组
var [x, ...y] = [1,2,3];

对象结构赋值
{name} = {name: 1, age: 1}
{a:{b:c}}={a:{b:{c:1}}}
a,b不能作为变量存在，只能作为一种模式
c作为变量存在

[a, b, c] = 'hello'

参数初始化，数组和对象在函数参数中的使用

proxy 代理器(拦截器)

模块化
